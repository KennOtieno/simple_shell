#include "shell.h"
/**
 * get_history_file - returns the history file of shell
 * @info: shell information
 * Return: a pointer to a string (history file)
 */
char *get_history_file(info_t *shell_info)
{
	char *buffer, *directory;

	directory = _getenv(shell_info, buffer);

	if (!directory)
		return (NULL);
	else
	{
		buffer = malloc(sizeof(char) *(_strlen(directory) + _strlen(HIST_FILE) + 2));
	}
	if (!buffer)
		return (NULL);
	buffer[0] = 0;
	_strcpy(buffer, directory);
        _strcat(buffer, "/");
	_strcat(buffer, HIST_FILE);
	return (buffer);
}

/**
 * write_history - new file, append exisitng files
 * shell_info: shell information
 * Return: 1 (Success) -1 (Failure)
 */
int write_history(info_t *shell_info)
{
	ssize_t file_descriptor;
	char *fname = get_history_file(shell_info);
	list_t *node = NULL;

	if (!fname)
	{
		return (-1);
	}
	file_descriptor = open(fname, O_CREAT | O_TRUNC | O_RDWR, 0644);
	free(fname);

	if (file_descriptor == -1)
		return (-1);
	for (node = shell_info->history; node; node = node->next)
	{
		_putsfd(node->str, file_descriptor);
		_putfd('\n', file_descriptor);
	}
	_putfd(BUF_FLUSH, file_descriptor);
	close(file_descriptor);
	return (1);
}

/**
 * read__history - function reads history of a file
 * @shell_info: shell information
 * Return: @shell_info->history_count, 0 (Failure)
 */
int read_history(info_t *shell_info)
{
	int last = 0, lcount = 0, j;
	char *fname = get_history_file(shell_info), *buffer = NULL;
	ssize_t f_size = 0, rdlen, filedescriptor;
	struct stat stat;

	if (!fname)
		return (0);
	filedescriptor = open(fname, O_RDONLY);
	free(fname);
	if (filedescriptor == -1)
		return (0);
	else if (!fstat(filedescriptor, &stat))
		f_size = stat.st_size;
	else if (f_size < 2)
		return (0);
	buffer = malloc(sizeof(char) * (f_size + 1));
	if (!buffer)
		return (0);
	rdlen =  read(filedescriptor, buffer, f_size);
	buffer[f_size] = 0;
	if (rdlen <= 0)
		return (free(buffer, 0));
	close(filedescriptor);
	for (j = 0; j < f_size; j++)
		if (buffer[j] == '\n')
		{
			buffer[j] = 0;
			build_history_list(shell_info, buffer + last, lcount++);
			last = j + 1;
		}
	if (last != j)
	{
		build_history_list(shell_info, buffer + last, lcount++);
		last = i + 1;
	}
	free(buffer);
	shell_info->history_count = lcount;
	while (shell_info->history_count-- >= HIST_MAX)
		delete_node_at_index(&(shell_info->history), 0);
	renumber_histroy(shell_info);
	return (shell_info->history_count);
}

/**
 * history_builder - adds to the history list
 * @shell_info: shell information
 * @buffer: buffer
 * @lcount: history line counter
 * Return: 0 Always (Success)
 */
int history_builder(info_t *shell_info, char *buffer, int lcount)
{
	list_t *node = NULL;

	if (shell_info->history)
		node = shell_info->history;
	add_node_end(&node, buffer, lcount);

	if(!shell_info->history)
		shell_info->history = node;
	return (0);
}

/**
 * renumber_history - renumbering history linked list
 * @shell_info: shell info
 * Return: history count
 */
int renumber_history(info_t *shell_info)
{
	list_t *node = shell_info->history;
	int a = 0;

	while (node)
	{
		node->num = a++;
		node = node->next;
	}
	return (shell_info->history_count = a);
}
